// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {

  id         String     @id @default(uuid()) @unique
  adminName  String?
  adminEmail String?    @unique
  password   String?
  isLocked   Boolean?   @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  stockout   StockOut[]
  stockin    StockIn[]
  product    Product[]
  activity   Activity[]
  backorder BackOrder[]
}

model Employee {
  id           String     @id @default(uuid())
  firstname    String?
  lastname     String?
  email        String?    @unique
  phoneNumber  String?    @unique
  address      String?
  status       Status     @default(ACTIVE)
  profileImg   String?
  cv           String?
  identityCard String?
  password     String?
  isLocked     Boolean?   @default(false)
  createdAt    DateTime   @default(now())
  tasks        Task[]     @relation("EmployeeTasks")
  stockout     StockOut[]
  stockin      StockIn[]
  product      Product[]
  activity  Activity[]
  report    Report[]
  backorder BackOrder[]
}

enum Status {
  ACTIVE
  INACTIVE
}

model Task {
  id          String     @id @default(uuid())
  taskname    String?
  description String?
  createdAt   DateTime   @default(now())
  employees   Employee[] @relation("EmployeeTasks")
}

model Category {
  id          String    @id @default(uuid())
  name        String?
  description String?
  createdAt   DateTime  @default(now())
  product     Product[] @relation("CategoryToProduct")
}

model Product {
  id          String    @id @default(uuid())
  productName String?
  adminId     String?
  employeeId  String?
  brand       String?
  categoryId  String
  description Json?
  imageUrls   Json?
  createdAt    DateTime?  
  admin       Admin?    @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employee    Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category    Category? @relation("CategoryToProduct", fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stockIn     StockIn[]
}

model StockIn {
  id           String     @id @default(uuid())
  productId    String
  adminId      String?
  employeeId   String?
  quantity     Int?
  price        Int?
  sellingPrice Int?
  totalPrice   Int?
  supplier     String?
  sku          String?
  barcodeUrl   String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  product      Product?   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  admin        Admin?     @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employee     Employee?  @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stockout     StockOut[]
}

model StockOut {
  id          String    @id @default(uuid())
  stockinId   String?
  adminId     String?
  employeeId  String?
  transactionId  String?
  quantity    Int?
  soldPrice   Int?
  clientName  String?
  clientEmail String?
  clientPhone String?
  paymentMethod PaymentMethod?
  backorderId String?
  backorder   BackOrder? @relation(fields: [backorderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stockin     StockIn?  @relation(fields: [stockinId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  admin       Admin?    @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employee    Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  salesReturnItems SalesReturnItem[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}



enum PaymentMethod {
  MOMO
  CARD
  CASH
}


model BackOrder{
  id  String    @id @default(uuid())
  productName String?
  quantity     Int?
  soldPrice    Int?
  adminId      String?
  employeeId   String? 
  admin        Admin?     @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employee     Employee?  @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stockout     StockOut[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Activity {
  id           String   @id @default(uuid())
  activityName String
  description  String
  employeeId  String?
  adminId      String?
  doneAt DateTime @default(now())

  admin  Admin? @relation(fields: [adminId], references: [id], onDelete: Cascade,onUpdate: Cascade)
  employee Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}


model SalesReturn {
  id        String              @id @default(uuid())
  transactionId String?
  creditnoteId String?
  reason    String?
  createdAt DateTime            @default(now())
  items     SalesReturnItem[]
}

model SalesReturnItem {
  id            String   @id @default(uuid())
  salesReturnId String
  stockoutId    String
  quantity      Int
  stockout      StockOut?     @relation(fields: [stockoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  salesReturn   SalesReturn @relation(fields: [salesReturnId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}





model Report {
  id             String         @id @default(cuid())
  employeeId   String
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  expenses       Expense[]

  // Credit & Debit records
  transactions   Transaction[]
  
  // Money records
  cashAtHand     Float          @default(0.0)
  moneyOnPhone   Float          @default(0.0)
  
  // Metadata
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}
model Expense {
  id          String   @id @default(cuid())
  reportId    String
  report      Report   @relation(fields: [reportId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  description String
  amount      Float
}

model Transaction {
  id          String   @id @default(cuid())
  reportId    String
  report      Report   @relation(fields: [reportId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  type        TransactionType
  description String
  amount      Float
}

enum TransactionType {
  CREDIT
  DEBIT
}
